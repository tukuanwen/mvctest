<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 生命周期测试  -->
    <!--配置Bean的后置处理器-->
    <bean id = "beanPostProcessor" class="com.tu.mvctest.test.MyBeanPostProcessor"/>

    <!--配置instantiationAwareBeanPostProcessor-->
    <bean id = "instantiationAwareBeanPostProcessor" class="com.tu.mvctest.test.MyInstantiationAwareBeanPostProcessor"/>

    <!--配置BeanFactory的后置处理器-->
    <bean id="beanFactoryPostProcessor" class="com.tu.mvctest.test.MyBeanFactoryPostProcessor"/>

    <bean id="studentBean" class="com.tu.mvctest.test.StudentBean" init-method="myInit" destroy-method="myDestroy" scope="singleton">
        <property name="name" value="tudou"/>
        <property name="age" value="20"/>
    </bean>

    <!-- =============================================springIOC实例====================================================== -->
    <!-- xml方式生成bean,并且分别以set方法、有参构造函数、p空间注入属性 -->
    <!-- set方法注入 非引用类型直接value ，引用值用ref -->
    <bean id = "testBean" class="com.tu.mvctest.test.iocDemo.TestBean" >
        <property name="banter" value="aa"/>
        <property name="blame" value="bb"/>
        <!-- 外部bean注入-->
        <property name="gzBean" ref="gzBean"/>
        <!-- 内部bean注入 -->
        <property name="innerBean">
            <bean id = "innerBean" class="com.tu.mvctest.test.iocDemo.InnerBean">
                <property name="iName" value="hh"/>
            </bean>
        </property>
    </bean>
    <!-- 级联赋值 -->
    <bean id = "testBean1" class="com.tu.mvctest.test.iocDemo.TestBean" >
        <property name="banter" value="aa"/>
        <property name="blame" value="bb"/>
        <!-- 外部注入中的级联复制 -->
        <property name="innerBean.iName" value="哈哈"></property>
    </bean>
    <bean id = "innerBean" class="com.tu.mvctest.test.iocDemo.InnerBean">
        <property name="iName" value="hh"/>
    </bean>

    <!-- 构造函数注入 已经特殊字符 -->
    <bean id="gzBean" class="com.tu.mvctest.test.iocDemo.GZBean">
        <!-- 构造函数注入数据 -->
        <constructor-arg name="banter" value="aa"/>
        <constructor-arg name="blame" value="cc"/>
        <!-- set方法注入参数，此例为演示注入特殊字符和空值 -->
        <!-- null值 -->
        <property name="bNull">
            <null></null>
        </property>
        <!-- 把特殊字符号内容写到CDATA中 -->
        <property name="bLunb" >
            <value><![CDATA[<<$#$@@任何特殊符号]]]></value>
        </property>
    </bean>
    <!-- p空间注入, 在xml头中加入p空间的标签 xmlns:p="http://www.springframework.org/schema/p" 建立在set方法上的 -->
    <bean id="testBean2" class="com.tu.mvctest.test.iocDemo.TestBean" p:blame="aa" p:banter="bb" p:gzBean-ref="gzBean" />

    <!-- 注入属性为集合 -->
    <bean id="collection" class="com.tu.mvctest.test.iocDemo.CollectionBean" >
        <!-- 数组 -->
        <property name="str">
            <array>
                <value>"a"</value>
                <value>"b"</value>
            </array>
        </property>
        <!-- list -->
        <property name="list">
            <list>
                <value>"c"</value>
                <value>"d"</value>
            </list>
        </property>
        <!-- map -->
        <property name="map">
            <map>
                <entry key="e" value="haha"></entry>
            </map>
        </property>
        <!-- set -->
        <property name="set">
            <set>
                <value>"f"</value>
            </set>
        </property>
        <!-- list 集合内容为引用值 -->
        <property name="innerBeanList">
            <list>
                <ref bean="innerBean"></ref>
            </list>
        </property>
    </bean>

    <!-- 提取公共部分的标签util, 需要在xml头中增加util标签包空间：http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 详细入xml头部 -->
    <util:list id="commonList">
        <value>"a"</value>
        <ref bean="innerBean"></ref>
    </util:list>

    <!-- bean的作用域配置和初始化方法、销毁方法配置-->
    <!-- scope作用域，有4种值：singleton单例实例，prototype多例实例，request，session;默认是singleton
            singleton:是在xml文件加载时创建
            prototype:是在获取bean对象时创建
    -->
    <!-- 初始化方法&销毁方法配置  init-method、destroy-method -->
    <bean id="scopeBeanTest" class="com.tu.mvctest.test.iocDemo.ScopeBeanTest" scope="prototype" init-method="initMthod" destroy-method="destroyMethod" >
        <property name="sName" value="kk"/>
    </bean>

    <!-- 自动装配，引用类型时，可以使用bean标签中的autowire：byName根据名字匹配注入，byType根据类型配置-->
    <bean id="a" class="com.tu.mvctest.test.iocDemo.TestBean" autowire="byName">
    </bean>

    <!-- 外部文件引入，引入context名称空间，http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd -->


</beans>